buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.hibernate:hibernate-gradle-plugin:5.4.3.Final"
    }
}

plugins {
    id "net.ltgt.apt-eclipse" version "0.21"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id 'com.bmuschko.docker-remote-api' version '4.10.0'
    id "application"
}

import com.bmuschko.gradle.docker.tasks.image.*

apply plugin: 'org.hibernate.orm'

version "0.1"
group "mn.employees"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.data:micronaut-data-processor:$micronautDataVersion"

    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    implementation 'io.micronaut.configuration:micronaut-flyway'
    implementation 'io.micronaut.configuration:micronaut-redis-lettuce'
    implementation "io.micronaut.data:micronaut-data-hibernate-jpa:$micronautDataVersion"
//    implementation "io.micronaut.data:micronaut-data-jdbc:$micronautDataVersion"
    implementation "io.micronaut.data:micronaut-data-model:$micronautDataVersion"

    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    runtimeOnly "org.postgresql:postgresql:42.2.6"
//    runtimeOnly "com.h2database:h2"
    runtimeOnly "io.micronaut:micronaut-discovery-client"
    runtime "io.micronaut.configuration:micronaut-jdbc-tomcat"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly

mainClassName = "mn.employees.EmployeeApplication"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}


shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

docker {
    registryCredentials {
        username = "${dockerUsername}"
        password = "${dockerPassword}"
    }
}

task buildDockerImage(type: DockerBuildImage) {
    inputDir = file("${project.projectDir}")
    tags.add("${dockerUsername}/${project.name}:latest")
}

task pushDockerImage(type: DockerPushImage) {
    imageName = "${dockerUsername}/${project.name}:latest"
}

task kubernetesCreateDeployment(type: Exec) {
    workingDir "${project.projectDir}"
    inputs.dir "${project.projectDir}"
    group = "k8s"
    def sysname = System.getProperty("os.name")
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "cmd.exe", "/c", "kubectl", "create", "-f", "${project.projectDir}\\k8s\\deployment.yaml"
    } else {
        commandLine "kubectl", "create",  "-f", "${project.projectDir}/k8s/deployment.yaml"
    }
}

task kubernetesDeleteDeployment(type: Exec) {
    workingDir "${project.projectDir}"
    inputs.dir "${project.projectDir}"
    group = "k8s"
    def sysname = System.getProperty("os.name")
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "cmd.exe", "/c", "kubectl", "delete", "deployment", "${project.name}"
    } else {
        commandLine "kubectl", "delete", "deployment", "${project.name}"
    }
}

task kubernetesCreateSvc(type: Exec) {
    workingDir "${project.projectDir}"
    inputs.dir "${project.projectDir}"
    group = "k8s"
    def sysname = System.getProperty("os.name")
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "cmd.exe", "/c", "kubectl", "create", "-f", "${project.projectDir}\\k8s\\svc.yaml"
    } else {
        commandLine "kubectl", "create",  "-f", "${project.projectDir}/k8s/svc.yaml"
    }
}

task kubernetesDeleteSvc(type: Exec) {
    workingDir "${project.projectDir}"
    inputs.dir "${project.projectDir}"
    group = "k8s"
    def sysname = System.getProperty("os.name")
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "cmd.exe", "/c", "kubectl", "delete", "svc", "${project.name}"
    } else {
        commandLine "kubectl", "delete", "svc", "${project.name}"
    }
}

task kubernetesDeleteAll(type: Exec) {
    workingDir "${project.projectDir}"
    inputs.dir "${project.projectDir}"
    group = "k8s"
    def sysname = System.getProperty("os.name")
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "cmd.exe", "/c", "kubectl", "delete", "deployment", "${project.name}"
        commandLine "cmd.exe", "/c", "kubectl", "delete", "svc", "${project.name}"
    } else {
        commandLine "kubectl", "delete", "deployment", "${project.name}"
        commandLine "kubectl", "delete", "svc", "${project.name}"
    }
}
